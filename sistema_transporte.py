# -*- coding: utf-8 -*-
"""
üöå SISTEMA VERMELINHO - INTERFACE GR√ÅFICA PROFISSIONAL
Busync - GUI Moderna para o Sistema de Transporte de Maric√°
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import webbrowser
import os
from datetime import datetime
import heapq
import networkx as nx
from dataclasses import dataclass
from typing import Dict, List, Tuple

# Tentar importar Folium
try:
    import folium
    from folium.plugins import Fullscreen, MeasureControl, MiniMap
    FOLIUM_DISPONIVEL = True
except ImportError:
    FOLIUM_DISPONIVEL = False

@dataclass
class PontoTransporte:
    """Representa um ponto de transporte em Maric√°"""
    id: str
    nome: str
    latitude: float
    longitude: float
    tipo: str
    acessivel: bool
    descricao: str = ""

class SistemaVermelhinho:
    """Sistema do Vermelinho - Backend"""
    
    def __init__(self):
        self.pontos: Dict[str, PontoTransporte] = {}
        self.grafo = nx.Graph()
        self.configurar_dados_marica()
        
    def configurar_dados_marica(self):
        """Configura dados reais de Maric√°"""
        
        # Pontos estrat√©gicos de Maric√°
        pontos_data = [
            ("centro", "Centro de Maric√°", -22.9194, -42.8186, "centro", True,
             "Centro comercial e administrativo da cidade"),
            ("hospital", "Hospital Municipal Conde Modesto Leal", -22.9168, -42.8203, "hospital", True,
             "Principal hospital p√∫blico com emerg√™ncia 24h"),
            ("aeroporto", "Aeroporto Municipal de Maric√°", -22.9241, -42.8089, "aeroporto", True,
             "Aeroporto para avia√ß√£o geral e executiva"),
            ("forum", "F√≥rum da Comarca de Maric√°", -22.9179, -42.8174, "forum", True,
             "Poder judici√°rio local - Totalmente acess√≠vel"),
            ("prefeitura", "Prefeitura Municipal", -22.9201, -42.8169, "governo", True,
             "Sede do governo municipal de Maric√°"),
            ("rodoviaria", "Rodovi√°ria de Maric√°", -22.9206, -42.8191, "terminal", True,
             "Terminal rodovi√°rio intermunicipal"),
            ("itaipuacu", "Itaipua√ßu Centro", -22.9658, -42.9923, "bairro", False,
             "Principal bairro litor√¢neo de Maric√°"),
            ("praia_frances", "Praia do Franc√™s", -22.9612, -42.9734, "praia", False,
             "Praia conhecida pelo surf e natureza preservada"),
            ("parque_nanci", "Parque Natural Municipal", -22.9723, -42.9612, "parque", True,
             "√Årea de preserva√ß√£o ambiental com trilhas"),
            ("guaratiba", "Guaratiba", -22.9287, -42.8367, "bairro", True,
             "Bairro residencial com com√©rcio local"),
            ("praia_barra", "Praia da Barra de Maric√°", -22.9389, -42.8534, "praia", False,
             "Praia urbana com acesso facilitado"),
            ("lagoa_aracatiba", "Lagoa de Ara√ßatiba", -22.9456, -42.8234, "lagoa", False,
             "Lagoa costeira integrada ao complexo lagunar"),
            ("bambui", "Bambu√≠", -22.9087, -42.7823, "bairro", True,
             "Regi√£o em desenvolvimento urbano"),
            ("shopping_marica", "Shopping Maric√°", -22.9156, -42.8198, "shopping", True,
             "Principal centro comercial da cidade"),
        
        ]
        
        # Criar pontos
        for id_ponto, nome, lat, lng, tipo, acessivel, desc in pontos_data:
            self.pontos[id_ponto] = PontoTransporte(id_ponto, nome, lat, lng, tipo, acessivel, desc)
            self.grafo.add_node(id_ponto, nome=nome, pos=(lng, lat), tipo=tipo, 
                              acessivel=acessivel, descricao=desc)
        
        # Conex√µes do Vermelinho
        conexoes_data = [
            ("centro", "hospital", 1.8, 12, True),
            ("centro", "aeroporto", 3.2, 18, True),
            ("centro", "forum", 0.9, 6, True),
            ("centro", "prefeitura", 0.7, 5, True),
            ("centro", "rodoviaria", 0.8, 6, True),
            ("centro", "shopping_marica", 1.1, 8, True),

            ("rodoviaria", "itaipuacu", 22.5, 45, False),
            ("centro", "itaipuacu", 21.7, 42, False),
            ("centro", "guaratiba", 5.4, 20, True),
            ("guaratiba", "praia_barra", 3.2, 15, False),
            ("centro", "lagoa_aracatiba", 6.2, 25, False),
            ("itaipuacu", "praia_frances", 2.8, 12, False),
            ("praia_frances", 7.4, 18, False),
            ("parque_nanci", "itaipuacu", 3.2, 14, False),
            ("bambui", "centro", 9.8, 28, True),
            ("guaratiba", "hospital", 4.2, 18, True),
            ("aeroporto", "hospital", 2.6, 12, True),
            ("shopping_marica", 0.8, 6, True),
        ]
        
        # Adicionar conex√µes
        for origem, destino, dist, tempo, acess in conexoes_data:
            self.grafo.add_edge(origem, destino, 
                              distancia=dist, tempo=tempo, acessivel=acess)
    
    def dijkstra_mais_rapido(self, origem: str, destino: str, apenas_acessivel: bool = False):
        """Encontra a rota mais r√°pida"""
        if origem not in self.grafo.nodes or destino not in self.grafo.nodes:
            return [], float('inf')
        
        tempos = {node: float('inf') for node in self.grafo.nodes}
        anteriores = {node: None for node in self.grafo.nodes}
        visitados = set()
        
        tempos[origem] = 0
        heap = [(0, origem)]
        
        while heap:
            tempo_atual, no_atual = heapq.heappop(heap)
            
            if no_atual in visitados:
                continue
                
            visitados.add(no_atual)
            
            if no_atual == destino:
                break
                
            for vizinho in self.grafo.neighbors(no_atual):
                if vizinho in visitados:
                    continue
                
                edge_data = self.grafo[no_atual][vizinho]
                
                if apenas_acessivel and not edge_data['acessivel']:
                    continue
                    
                novo_tempo = tempos[no_atual] + edge_data['tempo']
                
                if novo_tempo < tempos[vizinho]:
                    tempos[vizinho] = novo_tempo
                    anteriores[vizinho] = no_atual
                    heapq.heappush(heap, (novo_tempo, vizinho))
        
        # Reconstruir caminho
        caminho = []
        no_atual = destino
        while no_atual is not None:
            caminho.append(no_atual)
            no_atual = anteriores[no_atual]
        
        caminho.reverse()
        
        if len(caminho) == 1 and caminho[0] != origem:
            return [], float('inf')
            
        return caminho, tempos[destino]
    
    def obter_detalhes_rota(self, caminho: List[str]) -> Dict:
        """Obt√©m detalhes completos da rota"""
        if len(caminho) < 2:
            return {}
        
        detalhes = {
            'pontos': [self.pontos[ponto].nome for ponto in caminho],
            'distancia_total_km': 0,
            'tempo_total_min': 0,
            'totalmente_acessivel': True,
            'segmentos': []
        }
        
        for i in range(len(caminho) - 1):
            origem = caminho[i]
            destino = caminho[i + 1]
            edge_data = self.grafo[origem][destino]
            
            detalhes['distancia_total_km'] += edge_data['distancia']
            detalhes['tempo_total_min'] += edge_data['tempo']
            
            if not edge_data['acessivel']:
                detalhes['totalmente_acessivel'] = False
            
            detalhes['segmentos'].append({
                'de': self.pontos[origem].nome,
                'para': self.pontos[destino].nome,
                'tempo': edge_data['tempo'],
                'distancia': edge_data['distancia'],
                'acessivel': edge_data['acessivel']
            })
        
        return detalhes
    
    def criar_mapa_interativo(self, caminho: List[str] = None) -> str:
        """Cria mapa interativo usando Folium"""
        if not FOLIUM_DISPONIVEL:
            return None
            
        # Centro do mapa em Maric√°
        mapa = folium.Map(
            location=[-22.9400, -42.8400],
            zoom_start=11,
            tiles=None
        )
        
        # Adicionar camadas de mapa
        folium.TileLayer('OpenStreetMap', name='üó∫Ô∏è Mapa de Ruas').add_to(mapa)
        folium.TileLayer(
            tiles='https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
            attr='Esri',
            name='üõ∞Ô∏è Vista de Sat√©lite'
        ).add_to(mapa)
        
        # Configura√ß√£o de √≠cones por tipo
        config_tipos = {
            'centro': {'cor': 'red', 'icone': 'star'},
            'hospital': {'cor': 'red', 'icone': 'plus'},
            'aeroporto': {'cor': 'gray', 'icone': 'plane'},
            'terminal': {'cor': 'orange', 'icone': 'bus'},
            'governo': {'cor': 'blue', 'icone': 'university'},
            'forum': {'cor': 'purple', 'icone': 'balance-scale'},
            'shopping': {'cor': 'pink', 'icone': 'shopping-cart'},
            'universidade': {'cor': 'purple', 'icone': 'graduation-cap'},
            'bairro': {'cor': 'blue', 'icone': 'home'},
            'praia': {'cor': 'green', 'icone': 'umbrella-beach'},
            'lagoa': {'cor': 'lightblue', 'icone': 'water'},
            'parque': {'cor': 'darkgreen', 'icone': 'tree'}
        }
        
        # Adicionar pontos
        for ponto_id, ponto in self.pontos.items():
            config = config_tipos.get(ponto.tipo, {'cor': 'gray', 'icone': 'info-sign'})
            
            popup_html = f"""
            <div style="width: 300px;">
                <h3 style="color: {config['cor']};">üöå {ponto.nome}</h3>
                <p><strong>Tipo:</strong> {ponto.tipo.title()}</p>
                <p><strong>Acessibilidade:</strong> 
                {'<span style="color: green;">‚úÖ Acess√≠vel</span>' if ponto.acessivel else '<span style="color: red;">‚ö†Ô∏è Limitado</span>'}</p>
                <p><strong>Descri√ß√£o:</strong> {ponto.descricao}</p>
                <p><strong>Coordenadas:</strong> {ponto.latitude:.6f}, {ponto.longitude:.6f}</p>
            </div>
            """
            
            folium.Marker(
                location=[ponto.latitude, ponto.longitude],
                popup=folium.Popup(popup_html, max_width=320),
                tooltip=f"üöå {ponto.nome}",
                icon=folium.Icon(color=config['cor'], icon=config['icone'], prefix='fa')
            ).add_to(mapa)
        
        # Adicionar rota se fornecida
        if caminho and len(caminho) > 1:
            coordenadas_rota = []
            for ponto_id in caminho:
                if ponto_id in self.pontos:
                    ponto = self.pontos[ponto_id]
                    coordenadas_rota.append([ponto.latitude, ponto.longitude])
            
            if coordenadas_rota:
                folium.PolyLine(
                    locations=coordenadas_rota,
                    color='red',
                    weight=6,
                    opacity=0.9,
                    popup='üöå Rota Mais R√°pida do Vermelinho'
                ).add_to(mapa)
                
                # Marcadores de origem e destino
                folium.Marker(
                    location=coordenadas_rota[0],
                    popup='üèÅ ORIGEM',
                    icon=folium.Icon(color='green', icon='play', prefix='fa')
                ).add_to(mapa)
                
                folium.Marker(
                    location=coordenadas_rota[-1],
                    popup='üéØ DESTINO',
                    icon=folium.Icon(color='red', icon='flag-checkered', prefix='fa')
                ).add_to(mapa)
        
        # Adicionar plugins
        Fullscreen().add_to(mapa)
        MiniMap(toggle_display=True).add_to(mapa)
        folium.LayerControl().add_to(mapa)
        
        # Salvar mapa
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        nome_arquivo = f"mapa_vermelinho_{timestamp}.html"
        mapa.save(nome_arquivo)
        
        return nome_arquivo

class InterfaceProfissional:
    """Interface Gr√°fica Profissional"""
    
    def __init__(self):
        self.sistema = SistemaVermelhinho()
        self.root = tk.Tk()
        self.configurar_janela()
        self.criar_interface()
        self.ultima_rota = None
        
    def configurar_janela(self):
        """Configura a janela principal"""
        self.root.title("üöå Sistema Vermelinho - Maric√° Transport")
        self.root.geometry("1400x900")
        self.root.minsize(1200, 700)
        
        # Configurar estilo
        self.root.configure(bg='#f0f0f0')
        
        # Centralizar janela
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() - self.root.winfo_reqwidth()) // 2
        y = (self.root.winfo_screenheight() - self.root.winfo_reqheight()) // 2
        self.root.geometry(f"+{x}+{y}")
        
        # √çcone (se dispon√≠vel)
        try:
            self.root.iconbitmap("bus.ico")
        except:
            pass
    
    def criar_interface(self):
        """Cria a interface completa"""
        
        # Header profissional
        self.criar_header()
        
        # Frame principal
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # Painel esquerdo - Controles
        self.criar_painel_controles(main_frame)
        
        # Painel direito - Resultados
        self.criar_painel_resultados(main_frame)
        
        # Status bar
        self.criar_status_bar()
    
    def criar_header(self):
        """Cria header profissional"""
        header_frame = tk.Frame(self.root, bg='#2C3E50', height=100)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)
        
        # Logo e t√≠tulo
        title_frame = tk.Frame(header_frame, bg='#2C3E50')
        title_frame.pack(expand=True)
        
        # T√≠tulo principal
        title_label = tk.Label(title_frame, 
                              text="üöå SISTEMA VERMELINHO", 
                              font=('Arial', 24, 'bold'),
                              fg='white', bg='#2C3E50')
        title_label.pack(pady=(15, 5))
        
        # Subt√≠tulo
        subtitle_label = tk.Label(title_frame,
                                 text="Busync - Transporte P√∫blico Inteligente de Maric√°/RJ",
                                 font=('Arial', 12),
                                 fg='#BDC3C7', bg='#2C3E50')
        subtitle_label.pack()
        
        # Info do sistema
        info_label = tk.Label(title_frame,
                             text=f"üìç {len(self.sistema.pontos)} pontos mapeados | üîó {self.sistema.grafo.number_of_edges()} conex√µes | üí∞ 100% GRATUITO",
                             font=('Arial', 10),
                             fg='#95A5A6', bg='#2C3E50')
        info_label.pack()
    
    def criar_painel_controles(self, parent):
        """Cria painel de controles"""
        # Frame esquerdo
        left_frame = ttk.LabelFrame(parent, text="üéØ Planejamento da Viagem", padding="20")
        left_frame.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 20))
        
        # Origem
        ttk.Label(left_frame, text="üìç Ponto de Origem:", font=('Arial', 12, 'bold')).pack(anchor=tk.W, pady=(0, 5))
        
        self.combo_origem = ttk.Combobox(left_frame, width=35, state="readonly", font=('Arial', 11))
        self.combo_origem.pack(fill=tk.X, pady=(0, 15))
        
        # Destino
        ttk.Label(left_frame, text="üéØ Ponto de Destino:", font=('Arial', 12, 'bold')).pack(anchor=tk.W, pady=(0, 5))
        
        self.combo_destino = ttk.Combobox(left_frame, width=35, state="readonly", font=('Arial', 11))
        self.combo_destino.pack(fill=tk.X, pady=(0, 15))
        
        # Op√ß√µes de acessibilidade
        ttk.Label(left_frame, text="‚ôø Op√ß√µes de Acessibilidade:", font=('Arial', 12, 'bold')).pack(anchor=tk.W, pady=(0, 5))
        
        self.var_acessivel = tk.BooleanVar()
        check_acessivel = ttk.Checkbutton(left_frame, 
                                         text="Apenas rotas totalmente acess√≠veis",
                                         variable=self.var_acessivel,
                                         font=('Arial', 10))
        check_acessivel.pack(anchor=tk.W, pady=(0, 20))
        
        # Bot√µes de a√ß√£o
        self.criar_botoes_acao(left_frame)
        
        # Informa√ß√µes do sistema
        self.criar_info_sistema(left_frame)
        
        # Preencher dados
        self.atualizar_combos()
    
    def criar_botoes_acao(self, parent):
        """Cria bot√µes de a√ß√£o"""
        
        # Bot√£o principal - Calcular Rota
        btn_calcular = tk.Button(parent, 
                                text="üîç Calcular Rota Mais R√°pida",
                                command=self.calcular_rota,
                                bg='#3498DB', fg='white',
                                font=('Arial', 12, 'bold'),
                                relief=tk.FLAT, pady=10,
                                cursor='hand2')
        btn_calcular.pack(fill=tk.X, pady=(0, 10))
        
        # Bot√£o mapa interativo
        cor_mapa = '#27AE60' if FOLIUM_DISPONIVEL else '#95A5A6'
        texto_mapa = "üó∫Ô∏è Abrir Mapa Interativo" if FOLIUM_DISPONIVEL else "üó∫Ô∏è Mapa Interativo (Instalar Folium)"
        
        btn_mapa = tk.Button(parent,
                            text=texto_mapa,
                            command=self.abrir_mapa_interativo,
                            bg=cor_mapa, fg='white',
                            font=('Arial', 11, 'bold'),
                            relief=tk.FLAT, pady=8,
                            cursor='hand2')
        btn_mapa.pack(fill=tk.X, pady=(0, 10))
        
        # Bot√£o demonstra√ß√£o
        btn_demo = tk.Button(parent,
                            text="üé¨ Demonstra√ß√£o Autom√°tica",
                            command=self.executar_demonstracao,
                            bg='#E67E22', fg='white',
                            font=('Arial', 11, 'bold'),
                            relief=tk.FLAT, pady=8,
                            cursor='hand2')
        btn_demo.pack(fill=tk.X, pady=(0, 10))
        
        # Bot√£o limpar
        btn_limpar = tk.Button(parent,
                              text="üóëÔ∏è Limpar Resultados",
                              command=self.limpar_resultados,
                              bg='#95A5A6', fg='white',
                              font=('Arial', 11),
                              relief=tk.FLAT, pady=6,
                              cursor='hand2')
        btn_limpar.pack(fill=tk.X, pady=(0, 20))
    
    def criar_info_sistema(self, parent):
        """Cria painel de informa√ß√µes do sistema"""
        info_frame = ttk.LabelFrame(parent, text="‚ÑπÔ∏è Informa√ß√µes do Sistema", padding="10")
        info_frame.pack(fill=tk.X, pady=(20, 0))
        
        # Estat√≠sticas
        total_pontos = len(self.sistema.pontos)
        pontos_acessiveis = sum(1 for p in self.sistema.pontos.values() if p.acessivel)
        
        stats_text = f"""üìä ESTAT√çSTICAS:
‚Ä¢ Pontos mapeados: {total_pontos}
‚Ä¢ Pontos acess√≠veis: {pontos_acessiveis} ({(pontos_acessiveis/total_pontos*100):.1f}%)
‚Ä¢ Conex√µes: {self.sistema.grafo.number_of_edges()}
‚Ä¢ Folium: {'‚úÖ Instalado' if FOLIUM_DISPONIVEL else '‚ùå N√£o instalado'}

üéØ ALGORITMO:
‚Ä¢ Dijkstra otimizado
‚Ä¢ Crit√©rio: Tempo de viagem
‚Ä¢ Transporte: 100% gratuito"""
        
        info_label = tk.Label(info_frame, text=stats_text, 
                             font=('Consolas', 9), 
                             bg='#f0f0f0', justify=tk.LEFT)
        info_label.pack(anchor=tk.W)
    
    def criar_painel_resultados(self, parent):
        """Cria painel de resultados"""
        # Frame direito
        right_frame = ttk.LabelFrame(parent, text="üìä Resultados e An√°lise", padding="20")
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # √Årea de texto para resultados
        self.texto_resultados = scrolledtext.ScrolledText(right_frame, 
                                                         wrap=tk.WORD,
                                                         font=('Consolas', 11),
                                                         bg='white',
                                                         fg='#2C3E50',
                                                         height=25)
        self.texto_resultados.pack(fill=tk.BOTH, expand=True)
        
        # Mensagem inicial
        self.mostrar_mensagem_inicial()
    
    def criar_status_bar(self):
        """Cria barra de status"""
        self.status_frame = tk.Frame(self.root, bg='#34495E', height=30)
        self.status_frame.pack(side=tk.BOTTOM, fill=tk.X)
        self.status_frame.pack_propagate(False)
        self.status_label = ttk(staticmethod)
        self.__setattr__ = threading
        
        self.status_label = tk.Label(self.status_frame,
                                    text="üöå Sistema Vermelinho pronto para uso",
                                    font=('Arial', 10),
                                    fg='white', bg='#34495E')
        self.status_label.pack(side=tk.LEFT, padx=10, pady=5)
        
        # Data e hora
        self.data_label = tk.Label(self.status_frame,
                                  text=datetime.now().strftime("üìÖ %d/%m/%Y %H:%M"),
                                  font=('Arial', 10),
                                  fg='#BDC3C7', bg='#34495E')
        self.data_label.pack(side=tk.RIGHT, padx=10, pady=5)
    
    def atualizar_combos(self):
        """Atualiza os comboboxes com os pontos"""
        pontos_nomes = []
        for ponto in self.sistema.pontos.values():
            acess_icon = "‚ôø" if ponto.acessivel else "‚ö†Ô∏è"
            tipo_icon = {
                'centro': 'üèõÔ∏è', 'hospital': 'üè•', 'terminal': 'üöå', 
                'governo': 'üè¢', 'aeroporto': '‚úàÔ∏è', 'forum': '‚öñÔ∏è',
                'shopping': 'üõí', 'universidade': 'üéì',
                'bairro': 'üèòÔ∏è', 'praia': 'üèñÔ∏è', 'lagoa': 'üåä', 'parque': 'üå≥'
            }.get(ponto.tipo, 'üìç')
            
            pontos_nomes.append(f"{tipo_icon} {ponto.nome} {acess_icon}")
        
        pontos_nomes.sort()
        
        self.combo_origem['values'] = pontos_nomes
        self.combo_destino['values'] = pontos_nomes
        
        # Valores padr√£o
        if pontos_nomes:
            # Definir Itaipua√ßu como origem padr√£o se existir
            for i, nome in enumerate(pontos_nomes):
                if "Itaipua√ßu" in nome:
                    self.combo_origem.current(i)
                    break
            
            # Definir Centro como destino padr√£o se existir
            for i, nome in enumerate(pontos_nomes):
                if "Centro de Maric√°" in nome:
                    self.combo_destino.current(i)
                    break
    
    def mostrar_mensagem_inicial(self):
        """Mostra mensagem inicial no painel de resultados"""
        mensagem = """
üöå SISTEMA VERMELINHO - MARIC√Å/RJ
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Bem-vindo ao sistema profissional de otimiza√ß√£o de rotas do Vermelinho!

üéØ COMO USAR:
1. Selecione o ponto de ORIGEM no primeiro dropdown
2. Selecione o ponto de DESTINO no segundo dropdown
3. Marque a op√ß√£o de acessibilidade se necess√°rio
4. Clique em "üîç Calcular Rota Mais R√°pida"

üí° RECURSOS DISPON√çVEIS:
‚Ä¢ C√°lculo de rota mais r√°pida usando algoritmo de Dijkstra
‚Ä¢ Op√ß√£o de filtrar apenas rotas acess√≠veis
‚Ä¢ Mapa interativo estilo Google Maps (se Folium instalado)
‚Ä¢ Demonstra√ß√£o autom√°tica com casos reais
‚Ä¢ An√°lise detalhada de tempo, dist√¢ncia e acessibilidade

üöå SOBRE O VERMELINHO:
O sistema de transporte p√∫blico de Maric√° √© 100% GRATUITO!
Nosso algoritmo otimiza apenas o tempo de viagem, j√° que n√£o h√° custos.

‚ôø ACESSIBILIDADE:
‚Ä¢ Pontos com ‚ôø s√£o totalmente acess√≠veis
‚Ä¢ Pontos com ‚ö†Ô∏è t√™m limita√ß√µes de acesso
‚Ä¢ Use a op√ß√£o "Apenas rotas acess√≠veis" quando necess√°rio


‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

"""